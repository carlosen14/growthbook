/* eslint-disable no-console */
import Agenda, { Job } from "agenda";
import { CreateFactTableProps } from "@back-end/types/fact-table";
import { getDataSourceById } from "../models/DataSourceModel";
import { getSourceIntegrationObject } from "../services/datasource";
import { logger } from "../util/logger";
import { insertAudit } from "../models/AuditModel";
import { auditDetailsCreate } from "../services/audit";
import { ExpandedMember } from "../../types/organization";
import { AuditUserLoggedIn } from "../../types/audit";
import { getContextForAgendaJobByOrgId } from "../services/organizations";
import { trackJob } from "../services/otel";
import { createFactTable } from "../models/FactTableModel";

const CREATE_AUTOGENERATED_FACTTABLES_JOB_NAME = "createAutoGeneratedMetrics";

type CreateAutoGeneratedFactTablesJob = Job<{
  organizationId: string;
  datasourceId: string;
  factTablesToCreate: CreateFactTableProps[];
  user: Omit<
    ExpandedMember,
    "role" | "verified" | "limitAccessByEnvironment" | "environments"
  >;
}>;

const createAutoGeneratedFactTables = trackJob(
  CREATE_AUTOGENERATED_FACTTABLES_JOB_NAME,
  async (job: CreateAutoGeneratedFactTablesJob) => {
    console.log("in the createAutoGeneratedFactTables job");
    const {
      datasourceId,
      organizationId,
      factTablesToCreate,
      user,
    } = job.attrs.data;

    const context = await getContextForAgendaJobByOrgId(organizationId);

    try {
      const datasource = await getDataSourceById(context, datasourceId);

      if (!datasource) throw new Error("No datasource");

      //MKTODO: Is this necessary?
      const schemaFormat = datasource.settings.schemaFormat || "custom";

      if (schemaFormat === "custom")
        throw new Error(
          `Unable to automatically generate metrics for a custom schema format.`
        );

      const integration = getSourceIntegrationObject(context, datasource);

      if (!integration.getSourceProperties().supportsAutoGeneratedMetrics)
        throw new Error(
          "Auto generated metrics not supported for this data source"
        );

      //MKTODO: Is this the best way to do this? Or should I add an insertFactTables method on the FactTableModel to handle adding multiple at once
      for (const factTable of factTablesToCreate) {
        const res = await createFactTable(context, factTable);

        await insertAudit({
          event: "factTable.autocreate",
          entity: {
            object: "factTable",
            id: res.id,
          },
          organization: organizationId,
          dateCreated: res.dateCreated || new Date(),
          details: auditDetailsCreate(res),
          user,
        });
      }
    } catch (e) {
      logger.error(
        e,
        "Failed to generate automatic metrics. Reason: " + e.message
      );
    }
  }
);

let agenda: Agenda;
export default function (ag: Agenda) {
  agenda = ag;
  agenda.define(
    CREATE_AUTOGENERATED_FACTTABLES_JOB_NAME,
    createAutoGeneratedFactTables
  );
}

export async function queueCreateAutoGeneratedFactTables(
  datasourceId: string,
  organizationId: string,
  factTablesToCreate: CreateFactTableProps[],
  user: AuditUserLoggedIn
) {
  console.log("made it to the queueCreateAutoGeneratedFactTables job");
  if (!datasourceId || !organizationId || !factTablesToCreate || !user) return;

  const job = agenda.create(CREATE_AUTOGENERATED_FACTTABLES_JOB_NAME, {
    organizationId,
    datasourceId,
    factTablesToCreate,
    user,
  }) as CreateAutoGeneratedFactTablesJob;
  job.unique({ datasourceId, organizationId, factTablesToCreate });
  job.schedule(new Date());
  await job.save();
}
